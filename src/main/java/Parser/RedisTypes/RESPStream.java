package Parser.RedisTypes;

import java.util.*;
import java.util.stream.Collectors;

public class RESPStream {
    static private List<RespStreamEntry> entries = new ArrayList<>();

    public RESPStream() {}

    public RespStreamEntry getStreamEntry(String streamEntryId) {
        return entries.stream()
          .filter(se -> se.getId().equals(streamEntryId))
          .findFirst()
          .orElse(null);
    }

    public RespStreamEntry getLastStreamEntry() {
        if (entries.isEmpty()) return null;
        return entries.getLast();
    }

    public void addStreamEntry(RespStreamEntry streamEntry) {
        entries.add(streamEntry);
    }

    public String isStreamEntryValid(String streamEntryId) {
        RespStreamEntry lastStreamEntry = getLastStreamEntry();
        if (lastStreamEntry == null) return "";

        boolean isFullAutoGenerated = false;
        if (isFullAutoGenerated) { return ""; }

        boolean isPartialAutoGenerated = streamEntryId.split("-")[1].equals("*");

        long newStreamIdMillisecondsPart = Long.parseLong(streamEntryId.split("-")[0]);
        long lastStreamIdMillisecondsPart = Long.parseLong(lastStreamEntry.getId().split("-")[0]);
        boolean isMilliSecondPartValid = newStreamIdMillisecondsPart >= lastStreamIdMillisecondsPart;

        if (isPartialAutoGenerated && isMilliSecondPartValid) {
            return "";
        }

        if (!isPartialAutoGenerated) {
            long newStreamIdSequenceNoPart = Long.parseLong(streamEntryId.split("-")[1]);
            long lastStreamIdSequenceNoPart = Long.parseLong(lastStreamEntry.getId().split("-")[1]);

            if (newStreamIdMillisecondsPart == 0 && newStreamIdSequenceNoPart == 0) {
                return "-ERR The ID specified in XADD must be greater than 0-0\r\n";
            }

            boolean isSequenceNumberValid = newStreamIdSequenceNoPart >= lastStreamIdSequenceNoPart;;
            if (newStreamIdMillisecondsPart == lastStreamIdMillisecondsPart) {
                isSequenceNumberValid = newStreamIdSequenceNoPart > lastStreamIdSequenceNoPart;
            }

            if (!isMilliSecondPartValid || !isSequenceNumberValid) {
                return "-ERR The ID specified in XADD is equal or smaller than the target stream top item\r\n";
            }
        }
        return "";
    }

    public String createNextId(String streamEntryId) {
        StringBuilder id = new StringBuilder();
        String[] idParts = streamEntryId.split("-");
        long millisecondsPart = Long.parseLong(idParts[0]);
        long sequenceNoPart;
        RespStreamEntry lastStreamEntry = getLastStreamEntry();

        if (!idParts[1].equals("*")) {
            sequenceNoPart = Long.parseLong(idParts[1]);
            return id.append(millisecondsPart).append("-").append(sequenceNoPart).toString();
        }

        if (lastStreamEntry == null) {
            sequenceNoPart = millisecondsPart == 0 ? 1L : 0L;
        } else {
            long lastEntryMillisecondsPart = Long.parseLong(lastStreamEntry.getId().split("-")[0]);
            long lastEntrySequenceNoPart = Long.parseLong(lastStreamEntry.getId().split("-")[1]);
            sequenceNoPart = millisecondsPart > lastEntryMillisecondsPart ? 0L : lastEntrySequenceNoPart + 1;
        }
        return  id.append(millisecondsPart).append("-").append(sequenceNoPart).toString();
    }

    public class RespStreamEntry {
        String id;
        List<Map<String, Object>> streamEntries = new ArrayList<>();

        public String getId() {
            return id;
        }

        public void setId(String id) {
            this.id = id;
        }

        public List<Map<String, Object>> getStreamEntries() {
            return streamEntries;
        }

        public void addStreamEntry(Map<String, Object> streamEntry) {
            this.streamEntries.add(streamEntry);
        }

    }


}
